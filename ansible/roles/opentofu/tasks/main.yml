---
- name: Check if OpenTofu is installed
  command: tofu --version
  register: tofu_version_check
  failed_when: false
  changed_when: false

- name: Display OpenTofu version
  debug:
    msg: "OpenTofu version: {{ tofu_version_check.stdout_lines[0] if tofu_version_check.rc == 0 else 'Not installed' }}"

- name: Fail if OpenTofu is not installed
  fail:
    msg: "OpenTofu is not installed. Please install OpenTofu first."
  when: tofu_version_check.rc != 0

- name: Check if Terraform directory exists
  stat:
    path: "{{ terraform_directory }}"
  register: terraform_dir_stat

- name: Fail if Terraform directory doesn't exist
  fail:
    msg: "Terraform directory {{ terraform_directory }} does not exist"
  when: not terraform_dir_stat.stat.exists

- name: Initialize OpenTofu
  command: tofu init
  args:
    chdir: "{{ terraform_directory }}"
  register: tofu_init_result
  changed_when: "'Terraform has been successfully initialized' in tofu_init_result.stdout"

- name: Display OpenTofu init output
  debug:
    var: tofu_init_result.stdout_lines
  when: tofu_init_result.stdout_lines is defined

- name: Plan OpenTofu changes with logging
  shell: |
    echo "Starting OpenTofu plan at $(date)" >> {{ homelab_home | default('/opt/homelab') }}/logs/tofu-plan.log
    tofu plan -out=tfplan 2>&1 | tee -a {{ homelab_home | default('/opt/homelab') }}/logs/tofu-plan.log
  args:
    chdir: "{{ terraform_directory }}"
    executable: /bin/bash
  register: tofu_plan_result
  when: terraform_plan_only | default(false)

- name: Display OpenTofu plan output
  debug:
    var: tofu_plan_result.stdout_lines
  when:
    - terraform_plan_only | default(false)
    - tofu_plan_result.stdout_lines is defined

- name: Apply OpenTofu configuration with logging
  shell: |
    set -e
    echo "Starting OpenTofu apply at $(date)" >> {{ homelab_home | default('/opt/homelab') }}/logs/tofu-apply.log

    # Run tofu apply with detailed logging
    tofu apply -auto-approve -detailed-exitcode 2>&1 | tee -a {{ homelab_home | default('/opt/homelab') }}/logs/tofu-apply.log

    # Capture exit code
    TOFU_EXIT_CODE=${PIPESTATUS[0]}
    echo "OpenTofu apply completed with exit code: $TOFU_EXIT_CODE at $(date)" >> {{ homelab_home | default('/opt/homelab') }}/logs/tofu-apply.log

    # If failed, also log error details
    if [ $TOFU_EXIT_CODE -ne 0 ] && [ $TOFU_EXIT_CODE -ne 2 ]; then
      echo "ERROR: OpenTofu apply failed with exit code $TOFU_EXIT_CODE" >> {{ homelab_home | default('/opt/homelab') }}/logs/tofu-apply.log
      echo "Full error output:" >> {{ homelab_home | default('/opt/homelab') }}/logs/tofu-apply.log
      tofu show -json >> {{ homelab_home | default('/opt/homelab') }}/logs/tofu-state.json 2>/dev/null || true
    fi

    exit $TOFU_EXIT_CODE
  args:
    chdir: "{{ terraform_directory }}"
    executable: /bin/bash
  register: tofu_apply_result
  when: not (terraform_plan_only | default(false))
  failed_when: tofu_apply_result.rc != 0 and tofu_apply_result.rc != 2

- name: Display OpenTofu apply summary
  debug:
    msg: |
      OpenTofu apply completed!
      Exit code: {{ tofu_apply_result.rc | default('unknown') }}
      Log file: {{ homelab_home | default('/opt/homelab') }}/logs/tofu-apply.log

      {% if tofu_apply_result.rc == 0 %}
      ✅ No changes were needed
      {% elif tofu_apply_result.rc == 2 %}
      ✅ Changes applied successfully
      {% else %}
      ❌ Apply failed - check log file for details
      {% endif %}
  when:
    - not (terraform_plan_only | default(false))
    - tofu_apply_result is defined

- name: Get OpenTofu outputs
  command: tofu output -json
  args:
    chdir: "{{ terraform_directory }}"
  register: tofu_outputs_result
  changed_when: false
  when: not (terraform_plan_only | default(false))

- name: Parse OpenTofu outputs
  set_fact:
    terraform_outputs: "{{ tofu_outputs_result.stdout | from_json }}"
  when:
    - not (terraform_plan_only | default(false))
    - tofu_outputs_result.stdout is defined

- name: Display deployment summary
  debug:
    msg: |
      🚀 OpenTofu Deployment Complete!

      📊 Status: {{ 'Plan completed' if terraform_plan_only | default(false) else 'Applied successfully' }}
      📁 Directory: {{ terraform_directory }}

      {% if terraform_outputs is defined %}
      🔗 Outputs:
      {% for key, value in terraform_outputs.items() %}
      - {{ key }}: {{ value.value }}
      {% endfor %}
      {% endif %}
  when: not (terraform_plan_only | default(false))