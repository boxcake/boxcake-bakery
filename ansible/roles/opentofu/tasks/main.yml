---
- name: Check if OpenTofu is installed
  command: tofu --version
  register: tofu_version_check
  failed_when: false
  changed_when: false

- name: Display OpenTofu version
  debug:
    msg: "OpenTofu version: {{ tofu_version_check.stdout_lines[0] if tofu_version_check.rc == 0 else 'Not installed' }}"

- name: Fail if OpenTofu is not installed
  fail:
    msg: "OpenTofu is not installed. Please install OpenTofu first."
  when: tofu_version_check.rc != 0

- name: Check if Terraform directory exists
  stat:
    path: "{{ terraform_directory }}"
  register: terraform_dir_stat

- name: Fail if Terraform directory doesn't exist
  fail:
    msg: "Terraform directory {{ terraform_directory }} does not exist"
  when: not terraform_dir_stat.stat.exists

- name: Initialize OpenTofu
  command: tofu init
  args:
    chdir: "{{ terraform_directory }}"
  register: tofu_init_result
  changed_when: "'Terraform has been successfully initialized' in tofu_init_result.stdout"

- name: Display OpenTofu init output
  debug:
    var: tofu_init_result.stdout_lines
  when: tofu_init_result.stdout_lines is defined

- name: Plan OpenTofu changes with logging
  shell: |
    echo "Starting OpenTofu plan at $(date)" >> {{ homelab_home | default('/opt/homelab') }}/logs/tofu-plan.log
    tofu plan -out=tfplan 2>&1 | tee -a {{ homelab_home | default('/opt/homelab') }}/logs/tofu-plan.log
  args:
    chdir: "{{ terraform_directory }}"
    executable: /bin/bash
  register: tofu_plan_result
  when: terraform_plan_only | default(false)

- name: Display OpenTofu plan output
  debug:
    var: tofu_plan_result.stdout_lines
  when:
    - terraform_plan_only | default(false)
    - tofu_plan_result.stdout_lines is defined

- name: Ensure logs directory exists for OpenTofu
  file:
    path: "{{ homelab_home | default('/opt/homelab') }}/logs"
    state: directory
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_gid }}"
    mode: '0755'
  become: yes

- name: Apply OpenTofu configuration with logging
  shell: |
    set -e

    # Debug information
    echo "=== OpenTofu Apply Debug Info ==="
    echo "Current user: $(whoami)"
    echo "Current directory: $(pwd)"
    echo "Logs directory exists: $(ls -la {{ homelab_home | default('/opt/homelab') }}/logs/ 2>/dev/null || echo 'NO')"
    echo "Can write to logs: $(touch {{ homelab_home | default('/opt/homelab') }}/logs/test 2>/dev/null && echo 'YES' || echo 'NO')"

    # Create log file with initial debug info
    LOG_FILE="{{ homelab_home | default('/opt/homelab') }}/logs/tofu-apply.log"
    echo "=== OpenTofu Apply Started at $(date) ===" > "$LOG_FILE"
    echo "User: $(whoami)" >> "$LOG_FILE"
    echo "Working directory: $(pwd)" >> "$LOG_FILE"
    echo "Terraform directory: {{ terraform_directory }}" >> "$LOG_FILE"
    echo "Files in terraform directory:" >> "$LOG_FILE"
    ls -la . >> "$LOG_FILE" 2>&1

    # Check if tofu command exists
    if ! command -v tofu >/dev/null 2>&1; then
      echo "ERROR: tofu command not found in PATH" >> "$LOG_FILE"
      echo "PATH: $PATH" >> "$LOG_FILE"
      echo "Available commands: $(ls /usr/local/bin/ | grep -i tofu || echo 'none')" >> "$LOG_FILE"
      echo "ERROR: tofu command not found"
      exit 1
    fi

    echo "tofu version: $(tofu version)" >> "$LOG_FILE" 2>&1

    # Run tofu apply with output to log file
    echo "Running: tofu apply -auto-approve" >> "$LOG_FILE"
    echo "=== OpenTofu Apply Output ===" >> "$LOG_FILE"

    if tofu apply -auto-approve >> "$LOG_FILE" 2>&1; then
      TOFU_EXIT_CODE=0
      echo "SUCCESS: OpenTofu apply completed successfully at $(date)" >> "$LOG_FILE"
      echo "OpenTofu apply successful - check $LOG_FILE for details"
    else
      TOFU_EXIT_CODE=$?
      echo "ERROR: OpenTofu apply failed with exit code $TOFU_EXIT_CODE at $(date)" >> "$LOG_FILE"
      echo "Attempting to capture additional debug info..." >> "$LOG_FILE"

      # Try to get more debug info
      echo "=== Terraform State ===" >> "$LOG_FILE"
      tofu show >> "$LOG_FILE" 2>&1 || echo "Could not show state" >> "$LOG_FILE"

      echo "=== Terraform Configuration ===" >> "$LOG_FILE"
      find . -name "*.tf" -exec echo "File: {}" >> "$LOG_FILE" \; -exec cat {} >> "$LOG_FILE" \; 2>/dev/null || true

      echo "OpenTofu apply failed with exit code $TOFU_EXIT_CODE - check $LOG_FILE for details"
    fi

    exit $TOFU_EXIT_CODE
  args:
    chdir: "{{ terraform_directory }}"
    executable: /bin/bash
  register: tofu_apply_result
  when: not (terraform_plan_only | default(false))
  failed_when: tofu_apply_result.rc != 0

- name: Display OpenTofu apply summary
  debug:
    msg: |
      {{ tofu_apply_result.stdout | default('OpenTofu apply completed') }}

      📁 Log file: {{ homelab_home | default('/opt/homelab') }}/logs/tofu-apply.log
      📊 Exit code: {{ tofu_apply_result.rc | default('unknown') }}

      To view detailed output: cat {{ homelab_home | default('/opt/homelab') }}/logs/tofu-apply.log
  when:
    - not (terraform_plan_only | default(false))
    - tofu_apply_result is defined

- name: Get OpenTofu outputs
  command: tofu output -json
  args:
    chdir: "{{ terraform_directory }}"
  register: tofu_outputs_result
  changed_when: false
  when: not (terraform_plan_only | default(false))

- name: Parse OpenTofu outputs
  set_fact:
    terraform_outputs: "{{ tofu_outputs_result.stdout | from_json }}"
  when:
    - not (terraform_plan_only | default(false))
    - tofu_outputs_result.stdout is defined

- name: Display deployment summary
  debug:
    msg: |
      🚀 OpenTofu Deployment Complete!

      📊 Status: {{ 'Plan completed' if terraform_plan_only | default(false) else 'Applied successfully' }}
      📁 Directory: {{ terraform_directory }}

      {% if terraform_outputs is defined %}
      🔗 Outputs:
      {% for key, value in terraform_outputs.items() %}
      - {{ key }}: {{ value.value }}
      {% endfor %}
      {% endif %}
  when: not (terraform_plan_only | default(false))