---
# Portainer container management UI deployment (using kubernetes.core modules)
- name: Create Portainer persistent volume claim
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: portainer-pvc
        namespace: default
        labels:
          app: portainer
      spec:
        storageClassName: longhorn
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: "{{ portainer_storage_size }}"
    kubeconfig: /etc/rancher/k3s/k3s.yaml

- name: Create Portainer service account
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: portainer-sa
        namespace: default
    kubeconfig: /etc/rancher/k3s/k3s.yaml

- name: Create Portainer cluster role binding
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: portainer-crb
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: cluster-admin
      subjects:
      - kind: ServiceAccount
        name: portainer-sa
        namespace: default
    kubeconfig: /etc/rancher/k3s/k3s.yaml

- name: Create Portainer deployment
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: portainer
        namespace: default
        labels:
          app: portainer
      spec:
        replicas: 1
        selector:
          matchLabels:
            app: portainer
        template:
          metadata:
            labels:
              app: portainer
          spec:
            serviceAccountName: portainer-sa
            containers:
            - name: portainer
              image: "{{ portainer_image }}"
              ports:
              - containerPort: 9000
                name: http
              - containerPort: 9443
                name: https
              volumeMounts:
              - name: portainer-data
                mountPath: /data
              env:
              - name: PORTAINER_TEMPLATES
                value: "https://raw.githubusercontent.com/portainer/templates/master/templates.json"
              resources:
                requests:
                  memory: "128Mi"
                  cpu: "100m"
                limits:
                  memory: "256Mi"
                  cpu: "200m"
              securityContext:
                runAsUser: 0
              livenessProbe:
                httpGet:
                  path: /
                  port: 9000
                initialDelaySeconds: 30
                periodSeconds: 10
                timeoutSeconds: 5
              readinessProbe:
                httpGet:
                  path: /
                  port: 9000
                initialDelaySeconds: 5
                periodSeconds: 5
                timeoutSeconds: 3
            volumes:
            - name: portainer-data
              persistentVolumeClaim:
                claimName: portainer-pvc
    kubeconfig: /etc/rancher/k3s/k3s.yaml

- name: Create Portainer service
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: portainer-service
        namespace: default
        annotations:
          metallb.universe.tf/address-pool: "homelab-services"
      spec:
        type: LoadBalancer
        ports:
        - name: http
          port: 80
          targetPort: 9000
        - name: https
          port: 443
          targetPort: 9443
        selector:
          app: portainer
    kubeconfig: /etc/rancher/k3s/k3s.yaml

- name: Wait for Portainer deployment to be ready
  kubernetes.core.k8s_info:
    api_version: apps/v1
    kind: Deployment
    name: portainer
    namespace: default
    kubeconfig: /etc/rancher/k3s/k3s.yaml
    wait_condition:
      type: Available
      status: "True"
    wait_timeout: 300

- name: Create Portainer configuration job
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: batch/v1
      kind: Job
      metadata:
        name: portainer-configure
        namespace: default
        labels:
          app: portainer-configure
      spec:
        template:
          metadata:
            labels:
              app: portainer-configure
          spec:
            restartPolicy: OnFailure
            containers:
            - name: configure
              image: curlimages/curl:8.4.0
              command: ["/bin/sh"]
              args:
              - -c
              - |
                set -e
                
                # Install jq for JSON processing
                apk add --no-cache jq
                
                echo "üöÄ Configuring Portainer..."
                
                # Wait for Portainer to be ready
                echo "‚è≥ Waiting for Portainer to be accessible..."
                RETRY_COUNT=0
                MAX_RETRIES=60
                
                while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
                  if curl -s http://portainer-service:80/api/status >/dev/null 2>&1; then
                    echo "‚úÖ Portainer is ready"
                    break
                  fi
                  echo "   Waiting for Portainer API... ($((RETRY_COUNT + 1))/$MAX_RETRIES)"
                  sleep 5
                  RETRY_COUNT=$((RETRY_COUNT + 1))
                done
                
                if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
                  echo "‚ùå Timeout waiting for Portainer"
                  exit 1
                fi
                
                # Check if admin user already exists
                STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://portainer-service:80/api/users/admin/check || echo "000")
                
                if [ "$STATUS" = "204" ]; then
                  echo "‚ÑπÔ∏è  Admin user already configured, checking registry..."
                else
                  echo "üîê Setting up admin user..."
                  
                  # Initialize admin user
                  INIT_RESPONSE=$(curl -s -X POST \
                    -H "Content-Type: application/json" \
                    -d '{"Username":"admin","Password":"{{ portainer_admin_password }}"}' \
                    http://portainer-service:80/api/users/admin/init)
                  
                  echo "‚úÖ Admin user created"
                fi
                
                # Get JWT token for further API calls
                echo "üîë Authenticating..."
                TOKEN=$(curl -s -X POST \
                  -H "Content-Type: application/json" \
                  -d '{"Username":"admin","Password":"{{ portainer_admin_password }}"}' \
                  http://portainer-service:80/api/auth | jq -r '.jwt')
                
                if [ "$TOKEN" = "null" ] || [ -z "$TOKEN" ]; then
                  echo "‚ùå Failed to get authentication token"
                  exit 1
                fi
                
                echo "‚úÖ Authentication successful"
                
                # Check if registry already exists
                REGISTRIES=$(curl -s -H "Authorization: Bearer $TOKEN" \
                  http://portainer-service:80/api/registries)
                
                LOCAL_REGISTRY_EXISTS=$(echo "$REGISTRIES" | jq -r '.[] | select(.URL == "{{ ansible_default_ipv4.address }}:{{ registry_port }}") | .Name')
                
                if [ -n "$LOCAL_REGISTRY_EXISTS" ]; then
                  echo "‚ÑπÔ∏è  Local registry already configured: $LOCAL_REGISTRY_EXISTS"
                else
                  echo "üê≥ Registering local container registry..."
                  curl -s -X POST \
                    -H "Content-Type: application/json" \
                    -H "Authorization: Bearer $TOKEN" \
                    -d '{
                      "Name": "Local Registry",
                      "Type": 1,
                      "URL": "{{ ansible_default_ipv4.address }}:{{ registry_port }}",
                      "Authentication": false,
                      "Username": "",
                      "Password": ""
                    }' \
                    http://portainer-service:80/api/registries
                  
                  echo "‚úÖ Local registry registered"
                fi
                
                # Configure Portainer settings for better UX
                echo "‚öôÔ∏è  Configuring Portainer settings..."
                curl -s -X PUT \
                  -H "Content-Type: application/json" \
                  -H "Authorization: Bearer $TOKEN" \
                  -d '{
                    "AllowBindMountsForRegularUsers": true,
                    "AllowPrivilegedModeForRegularUsers": true,
                    "AllowStackManagementForRegularUsers": true,
                    "DisplayDonationHeader": false,
                    "DisplayExternalContributors": false,
                    "EnableTelemetry": false,
                    "UserSessionTimeout": "8h"
                  }' \
                  http://portainer-service:80/api/settings
                
                echo "‚úÖ Portainer settings configured"
                
                echo "üéâ Portainer configuration complete!"
                echo "   üë§ Admin user: admin"
                echo "   üîê Password: {{ portainer_admin_password }}"
                echo "   üê≥ Registry: {{ ansible_default_ipv4.address }}:{{ registry_port }}"
              resources:
                requests:
                  memory: "64Mi"
                  cpu: "50m"
                limits:
                  memory: "128Mi"
                  cpu: "100m"
    kubeconfig: /etc/rancher/k3s/k3s.yaml

- name: Wait for Portainer configuration job to complete
  kubernetes.core.k8s_info:
    api_version: batch/v1
    kind: Job
    name: portainer-configure
    namespace: default
    kubeconfig: /etc/rancher/k3s/k3s.yaml
    wait_condition:
      type: Complete
      status: "True"
    wait_timeout: 300
  register: config_job_result
  failed_when: false

- name: Get Portainer service information
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Service
    name: portainer-service
    namespace: default
    kubeconfig: /etc/rancher/k3s/k3s.yaml
  register: portainer_service_info

- name: Display Portainer status
  debug:
    msg: |
      üö¢ Portainer deployed and configured successfully!
      
      üéØ AUTOMATED CONFIGURATION:
      {% if config_job_result.resources and config_job_result.resources | length > 0 and config_job_result.resources[0].status and config_job_result.resources[0].status.succeeded is defined %}
      ‚úÖ Configuration job completed successfully
      ‚úÖ Admin user created automatically
      ‚úÖ Local registry registered
      ‚úÖ Settings optimized for home lab
      {% else %}
      ‚ö†Ô∏è  Configuration job may still be running - check: kubectl logs job/portainer-configure
      {% endif %}
      
      üåê Access URLs:
      {% if portainer_service_info.resources and portainer_service_info.resources | length > 0 and portainer_service_info.resources[0].status.loadBalancer.ingress is defined %}
      - LoadBalancer: http://{{ portainer_service_info.resources[0].status.loadBalancer.ingress[0].ip }}
      - LoadBalancer HTTPS: https://{{ portainer_service_info.resources[0].status.loadBalancer.ingress[0].ip }}
      {% endif %}
      - NodePort HTTP: http://{{ ansible_default_ipv4.address }}:{{ portainer_nodeport }}
      - NodePort HTTPS: https://{{ ansible_default_ipv4.address }}:{{ portainer_nodeport_https }}
      
      üîê Login Credentials:
      - Username: admin
      - Password: {{ portainer_admin_password }}
      
      üíæ Pre-configured Features:
      - Local Kubernetes environment connected
      - Registry: {{ ansible_default_ipv4.address }}:{{ registry_port }}
      - Optimized settings for home lab use
      - Extended session timeout (8h)
      
      üîç Verification Commands:
      - kubectl get pods -l app=portainer
      - kubectl get svc portainer-service
      - kubectl get job portainer-configure
      - kubectl logs job/portainer-configure
