---
# Main Ansible playbook for Home Lab Pi setup (Stage 2)
- name: "Home Lab Pi Complete Setup"
  hosts: localhost
  become: yes
  gather_facts: yes
  connection: local
  
  vars_files:
    - vars/main.yml
    - vars/network.yml
    - vars/user-overrides.yml
  
  pre_tasks:
    - name: Update package cache
      apt:
        update_cache: yes
        cache_valid_time: 3600
      tags: always

  roles:
    - role: system-prep
      tags: [system, prep]
      when: not (ansible_run_tags is defined and 'bootstrap' in ansible_skip_tags | default([]))

    - role: homelab-user
      tags: [user, security]
      when: not (ansible_run_tags is defined and 'bootstrap' in ansible_skip_tags | default([]))
      
    - role: docker
      tags: [docker, container]
      
    - role: k3s
      tags: [k3s, kubernetes]
      
    - role: storage
      tags: [storage, longhorn]
      
    - role: load-balancer
      tags: [metallb, networking]

    - role: kubelish
      tags: [kubelish, mdns]
      when: not skip_kubelish | default(false)

    - role: opentofu
      tags: [opentofu, terraform, infrastructure]

  post_tasks:
    - name: Wait for Portainer service to exist
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Service
        name: portainer-service
        namespace: default
        wait: true
        wait_timeout: 300
        kubeconfig: "{{ kubeconfig_path }}"
      register: portainer_service_wait
      failed_when: false
      tags: [portainer-config, configure]

    - name: Wait for Portainer deployment to be available
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: Deployment
        name: portainer
        namespace: default
        wait: true
        wait_condition:
          type: Available
          status: "True"
        wait_timeout: 300
        kubeconfig: "{{ kubeconfig_path }}"
      tags: [portainer-config, configure]

    - name: Get Portainer service info for configuration
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Service
        name: portainer-service
        namespace: default
        kubeconfig: "{{ kubeconfig_path }}"
      register: portainer_service_info
      tags: [portainer-config, configure]

    - name: Configure Portainer via API
      shell: |
        set -e

        # Get Portainer service IP
        {% if portainer_service_info.resources and portainer_service_info.resources | length > 0 %}
        {% if portainer_service_info.resources[0].status.loadBalancer.ingress is defined and portainer_service_info.resources[0].status.loadBalancer.ingress | length > 0 %}
        PORTAINER_IP="{{ portainer_service_info.resources[0].status.loadBalancer.ingress[0].ip }}"
        {% else %}
        PORTAINER_IP="{{ portainer_service_info.resources[0].spec.clusterIP }}"
        {% endif %}
        {% endif %}

        PORTAINER_URL="http://${PORTAINER_IP}:80"
        ADMIN_PASSWORD="{{ portainer_admin_password | default('homelab123!') }}"

        echo "üöÄ Configuring Portainer at ${PORTAINER_URL}..."

        # Wait for Portainer to be ready
        echo "‚è≥ Waiting for Portainer API to be accessible..."
        RETRY_COUNT=0
        MAX_RETRIES=60

        while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
          if curl -s "${PORTAINER_URL}/api/status" >/dev/null 2>&1; then
            echo "‚úÖ Portainer API is ready"
            break
          fi
          echo "   Waiting for Portainer API... ($((RETRY_COUNT + 1))/$MAX_RETRIES)"
          sleep 5
          RETRY_COUNT=$((RETRY_COUNT + 1))
        done

        if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
          echo "‚ùå Timeout waiting for Portainer API"
          exit 1
        fi

        # Check if admin user already exists
        STATUS=$(curl -s -o /dev/null -w "%{http_code}" "${PORTAINER_URL}/api/users/admin/check" || echo "000")

        if [ "$STATUS" = "204" ]; then
          echo "‚ÑπÔ∏è  Admin user already configured"
        else
          echo "üîê Setting up admin user..."

          # Initialize admin user
          curl -s -X POST \
            -H "Content-Type: application/json" \
            -d "{\"Username\":\"admin\",\"Password\":\"${ADMIN_PASSWORD}\"}" \
            "${PORTAINER_URL}/api/users/admin/init"

          echo "‚úÖ Admin user created"
        fi

        # Get JWT token for further API calls
        echo "üîë Authenticating..."
        TOKEN=$(curl -s -X POST \
          -H "Content-Type: application/json" \
          -d "{\"Username\":\"admin\",\"Password\":\"${ADMIN_PASSWORD}\"}" \
          "${PORTAINER_URL}/api/auth" | jq -r '.jwt')

        if [ "$TOKEN" = "null" ] || [ -z "$TOKEN" ]; then
          echo "‚ùå Failed to get authentication token"
          exit 1
        fi

        echo "‚úÖ Authentication successful"

        # Check if local registry already exists
        REGISTRIES=$(curl -s -H "Authorization: Bearer $TOKEN" "${PORTAINER_URL}/api/registries")
        LOCAL_REGISTRY_EXISTS=$(echo "$REGISTRIES" | jq -r '.[] | select(.URL == "{{ ansible_default_ipv4.address }}:{{ registry_port | default(5000) }}") | .Name')

        if [ -n "$LOCAL_REGISTRY_EXISTS" ]; then
          echo "‚ÑπÔ∏è  Local registry already configured: $LOCAL_REGISTRY_EXISTS"
        else
          echo "üê≥ Registering local container registry..."
          curl -s -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TOKEN" \
            -d '{
              "Name": "Local Registry",
              "Type": 1,
              "URL": "{{ ansible_default_ipv4.address }}:{{ registry_port | default(5000) }}",
              "Authentication": false,
              "Username": "",
              "Password": ""
            }' \
            "${PORTAINER_URL}/api/registries"

          echo "‚úÖ Local registry registered"
        fi

        # Configure Portainer settings
        echo "‚öôÔ∏è  Configuring Portainer settings..."
        curl -s -X PUT \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer $TOKEN" \
          -d '{
            "AllowBindMountsForRegularUsers": true,
            "AllowPrivilegedModeForRegularUsers": true,
            "AllowStackManagementForRegularUsers": true,
            "DisplayDonationHeader": false,
            "DisplayExternalContributors": false,
            "EnableTelemetry": false,
            "UserSessionTimeout": "8h"
          }' \
          "${PORTAINER_URL}/api/settings"

        echo "‚úÖ Portainer settings configured"
        echo "üéâ Portainer configuration complete!"
        echo "   üë§ Admin user: admin"
        echo "   üîê Password: ${ADMIN_PASSWORD}"
        echo "   üåê Access: ${PORTAINER_URL}"
      args:
        executable: /bin/bash
      tags: [portainer-config, configure]
    - name: Display completion message
      debug:
        msg: |
          üéâ Stage 2 Home Lab deployment completed successfully!

          ‚úÖ COMPLETE INFRASTRUCTURE:
          - K3s Kubernetes cluster
          - Longhorn distributed storage
          - MetalLB load balancer with configured IP pools
          - Kubelish mDNS service discovery
          - All selected services deployed and configured

          üéØ DEPLOYED SERVICES:
          - Portainer: Container management interface
          - Docker Registry: Private container registry
          - Registry UI: Web interface for registry browsing
          - All services accessible via LoadBalancer IPs

          üìä MANAGEMENT ACCESS:
          Run: kubectl get svc -A | grep LoadBalancer
          Switch to management user: sudo -u {{ homelab_user }} -i

          üåê ACCESS URLs:
          Check your web interface completion page for service URLs

          üéä Two-Stage Deployment Complete!
      tags: always
